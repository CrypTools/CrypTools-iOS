//
//  MessagesViewController.swift
//  iMessage
//
//  Created by Arthur Guiot on 21/04/2018.
//  Copyright Â© 2018 Arthur Guiot. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
	@IBOutlet weak var TextView: UITextView!
	@IBOutlet weak var Tutorial: UILabel!
	@IBOutlet weak var Button: UIButton!
	@IBOutlet weak var BackButton: UIButton!
	
	var cipher = Cipher()
	override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
		TextView.isHidden = true
		BackButton.isHidden = true
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
	@IBAction func Decrypt(_ sender: UIButton) {
		let text = UIPasteboard.general.string ?? ""
		
		let parsed = Parser(text)
		
		if parsed.valid {
			let cipherName = parsed.cipher
			let text = parsed.text
			let key = parsed.key
			
			let cipher = self.cipher.getDecrypt(cipherName)
			
			TextView.text = cipher(text, key)
			
			Button.isHidden = true
			Tutorial.isHidden = true
			TextView.isHidden = false
			BackButton.isHidden = false
		} else {
			let alertController = UIAlertController(title: "Error", message:
				"Text couldn't be parsed. Try again.", preferredStyle: .alert)
			self.present(alertController, animated: true) {
				let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.dismissAlertController))
				alertController.view.superview?.subviews[0].addGestureRecognizer(tapGesture)
			}
		}
	}
	
	@objc func dismissAlertController(_ sender: UITapGestureRecognizer) {
		self.dismiss(animated: true, completion: nil)
	}
	@IBAction func Back(_ sender: Any) {
		back()
	}
	@IBAction func BackButtonAction(_ sender: Any) {
		back()
	}
	func back() {
		TextView.isHidden = true
		BackButton.isHidden = true
		Button.isHidden = false
		Tutorial.isHidden = false
	}
	
}
